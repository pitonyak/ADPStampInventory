CC:=gcc
CXX:=g++
CFLAGS:=-O3 -fPIC
#
# Do NOT sanitize alignment or there will be lots of errors while accessing pcap data that is
# is not aligned. 
# If you use the sanitizer, then you must install the sanitizer module and the code will
# run slower. Good for debugging, bad for large runtimes. 
# see https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html
#
# -O3		More optimizations than -O2
# -fPIC 	emit position-independent code.
#           I use this because it was used in the original code.
#           The generated code will be relative to the GLobal Offset Table (GOT).
#           -fPIC is only needed on some machines so I suspect that the original code
#           was compiled for OSX.
# -std=c++17 Enable C++17, which is not available by default in GCC 9 on Ubuntu 20.0.4
# -Werror 	Make all warnings errors
# -Wall 	Turn on all warnings (well almost all)
# -Wextra	Turn on a few more not covered with -Wall (see https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html)
#
# -fsanitize=address 	Enable the AddressSanitizer (fast memory error detector)
# -fsanitize=undefined	UndefinedBehaviorSanitizer
# -fno-sanitize=alignment	Of there is a complaint while accessing types at improper boundaries.
#                           Only a problem because -fsantize prior.
#
#CXXFLAGS:=-O3 -fPIC -std=c++17
#CXXFLAGS:=-O3 -fPIC -std=c++17 -Werror -Wall -Wextra -fsanitize=undefined,address -fno-sanitize=alignment
CXXFLAGS:=-O3 -fPIC -std=c++17 -Werror -Wall -Wextra 
#INCLUDE:=-I/work1/home/emeneker/local_build/install/libpcap/1.9.1/include
LIBS:=-lpcap

# So clean is always considered out of date.
.PHONY=clean

# Add .d to Make's recognized suffixes.
SUFFIXES += .d

#We don't need to clean up when we're making these targets
NODEPS:=clean

# Find all the C++ files in the ./ directory
# Remove leading ./
SOURCES:=$(shell find -name "*.cpp")
SOURCES:=$(patsubst ./%,%,$(SOURCES))
#These are the dependency files, which make will clean up after it creates them
DEPFILES:=$(patsubst %.cpp,%.d,$(SOURCES))
OBJFILES:=$(patsubst %.cpp,%.o,$(SOURCES))
EXEFILES:=heuristics find_macs_and_ips crc_test utilities_test print_ethertypes dns_parse packet_stripper

# I can avoid this by listing the DEPFILES as part of all.
#Don't create dependencies when we're cleaning, for instance
ifeq (0, $(words $(findstring $(MAKECMDGOALS), $(NODEPS))))
    #Chances are, these files don't exist.  GMake will create them and
    #clean up automatically afterwards

    all: $(DEPFILES) $(OBJFILES) $(EXEFILES) 
    -include $(DEPFILES)
endif

#$(info SOURCES: $(SOURCES))
$(info DEPFILES: $(DEPFILES))
$(info OBJFILES: $(OBJFILES))
$(info EXEFILES: $(EXEFILES))

#This is the rule for creating the dependency files
%.d: %.cpp
	$(CXX) $(CXXFLAGS) -MM -MT '$(patsubst %.cpp,%.o,$<)' $< -MF $@

#This rule does the compilation
%.o: %.cpp %.d %.h
	$(CXX) $(CXXFLAGS) -o $@ -c $<

heuristics: main.o utilities.o iptype.o crc32_x.o ethtype.o macaddresses.o ipaddresses.o bitsetdynamic.o MurmurHash3.o csvwriter.o process_pcap_mac_ip.o process_pcap_heuristic.o macsec.o heuristicthreadpool.o heuristicthread.o
	$(CXX) $(CXXFLAGS) main.o utilities.o iptype.o crc32_x.o ethtype.o macaddresses.o ipaddresses.o ahocorasickbinary.o bitsetdynamic.o MurmurHash3.o csvwriter.o process_pcap_mac_ip.o process_pcap_heuristic.o macsec.o heuristicthreadpool.o heuristicthread.o -o heuristics $(LDFLAGS) $(LIBS)

find_macs_and_ips: find_macs_and_ips.o macaddresses.o ipaddresses.o utilities.o
	$(CXX) $(CXXFLAGS) find_macs_and_ips.o macaddresses.o ipaddresses.o utilities.o MurmurHash3.o -o find_macs_and_ips $(LDFLAGS) $(LIBS)

utilities_test: utilities_test.o utilities.o ahocorasickbinary.o bitsetdynamic.o ethtype.o iptype.o ipaddresses.o macaddresses.o MurmurHash3.o csvwriter.o
	$(CXX) $(CXXFLAGS) utilities_test.o utilities.o ahocorasickbinary.o bitsetdynamic.o ethtype.o iptype.o ipaddresses.o macaddresses.o MurmurHash3.o csvwriter.o -o utilities_test $(LDFLAGS) $(LIBS)

crc_test: crc_test.o crc32_x.o
	$(CXX) $(CXXFLAGS) crc_test.o crc32_x.o -o crc_test $(LDFLAGS) $(LIBS)

print_ethertypes: print_ethertypes.o ethtype.o utilities.o 
	$(CXX) $(CXXFLAGS) print_ethertypes.o utilities.o ethtype.o -o print_ethertypes $(LDFLAGS) $(LIBS)

dns_parse: dns_tcp.o dns_network.o dns_rtypes.o dns_strutils.o dns_parse.o
	$(CXX) $(CXXFLAGS) dns_tcp.o dns_network.o dns_rtypes.o dns_strutils.o dns_parse.o -o dns_parse $(LDFLAGS) $(LIBS)

packet_stripper: packet_stripper.o utilities.o
	$(CXX) $(CXXFLAGS) packet_stripper.o utilities.o -o packet_stripper $(LDFLAGS) $(LIBS)

clean:
	rm -f $(DEPFILES) $(OBJFILES) $(EXEFILES)
